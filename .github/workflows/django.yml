name: Django CI

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    environment: djangoEnv

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set environment variables
      run: echo "SECRET_KEY=${{ secrets.SECRET_KEY_DJANGO }}" >> $GITHUB_ENV

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker Container
      run: docker-compose -f arosaj.yml build

    - name : Docker Image
      run: docker image

    - name: Save Docker Image to Tarball
      run: docker save -o arosaje_web.tar arosaje_web

    - name: Upload Docker Image Tarball
      uses: actions/upload-artifact@v4
      with:
        name: arosaje_web_image
        path: arosaje_web.tar

  unittest:
    needs: build
    runs-on: ubuntu-latest
    environment: djangoEnv

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Docker Image Tarball
      uses: actions/download-artifact@v4
      with:
        name: arosaje_web_image

    - name: Load Docker Image from Tarball
      run: docker load -i arosaje_web.tar

    - name: Run docker image
      run: |
        docker run -d --name arosaje_container arosaje_web
        docker ps

    - name: Run Tests with Coverage
      run: docker exec $(docker ps -qf "name=arosaje_container") coverage run manage.py test

    - name: Generate and Copy Coverage Report
      run: |
        docker exec $(docker ps -qf "name=arosaje_container") coverage xml
        docker cp $(docker ps -qf "name=arosaje_container"):/app/coverage.xml .

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage.xml

  sonarQubeScan:
    needs: unittest
    name: sonarQubeScan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml