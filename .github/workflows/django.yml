name: Django CI

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    environment: djangoEnv

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY_DJANGO }}" >> $GITHUB_ENV
        echo "DEBUG=${{ secrets.DEBUG_DJANGO }}" >> $GITHUB_ENV
        echo "NAME=${{ secrets.BDD_NAME }}" >> $GITHUB_ENV
        echo "USER=${{ secrets.BDD_USER }}" >> $GITHUB_ENV
        echo "PASSWORD=${{ secrets.BDD_PASSWORD }}" >> $GITHUB_ENV
        echo "HOST=${{ secrets.BDD_HOST }}" >> $GITHUB_ENV
        echo "PORT=${{ secrets.BDD_PORT }}" >> $GITHUB_ENV

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker Container
        run: docker-compose -f arosaj.yml build

      - name: Docker Image
        run: docker image

      - name: Save Docker Image to Tarball
        run: docker save -o arosaje_web.tar arosaje_web

      - name: Upload Docker Image Tarball
        uses: actions/upload-artifact@v4
        with:
          name: arosaje_web_image
          path: arosaje_web.tar

  unittest:
    needs: build
    runs-on: ubuntu-latest
    environment: djangoEnv

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Docker Image Tarball
        uses: actions/download-artifact@v4
        with:
          name: arosaje_web_image

      - name: Load Docker Image from Tarball
        run: docker load -i arosaje_web.tar

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Export environment variables
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY_DJANGO }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG_DJANGO }}" >> .env
        echo "NAME=${{ secrets.BDD_NAME }}" >> .env
        echo "USER=${{ secrets.BDD_USER }}" >> .env
        echo "PASSWORD=${{ secrets.BDD_PASSWORD }}" >> .env
        echo "HOST=${{ secrets.BDD_HOST }}" >> .env
        echo "PORT=${{ secrets.BDD_PORT }}" >> .env

    - name: Run Containers
      run: |
        docker-compose -f arosaj.yml --env-file .env up -d
        docker-compose -f arosaj.yml ps
        docker-compose -f arosaj.yml logs web

    - name: Wait for Web container readiness
      run: |
        for i in {1..30}; do
          if docker-compose -f arosaj.yml exec web python manage.py migrate --check > /dev/null 2>&1; then
            echo "Django is ready!"
            exit 0
          fi
          echo "Waiting for Django..."
          sleep 5
        done
        echo "Django not ready after 150 seconds."


    - name: Run Tests with Coverage
      run: |
        docker-compose -f arosaj.yml exec web coverage run manage.py check || docker-compose -f arosaj.yml exec web coverage run manage.py test || docker-compose -f arosaj.yml logs web


    - name: Generate Coverage Report
      run: docker-compose -f arosaj.yml exec web coverage xml

    - name: Copy Coverage Report
      run: docker cp $(docker-compose -f arosaj.yml ps -q web):/app/SitePlante/coverage.xml .

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml


  sonarQubeScan:
    needs: unittest
    name: sonarQubeScan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml
